// Generated by gencpp from file pi_robot/BMP180.msg
// DO NOT EDIT!


#ifndef PI_ROBOT_MESSAGE_BMP180_H
#define PI_ROBOT_MESSAGE_BMP180_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pi_robot
{
template <class ContainerAllocator>
struct BMP180_
{
  typedef BMP180_<ContainerAllocator> Type;

  BMP180_()
    : temperature(0.0)
    , pressure(0.0)
    , altitude(0.0)  {
    }
  BMP180_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , pressure(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _pressure_type;
  _pressure_type pressure;

   typedef float _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::pi_robot::BMP180_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_robot::BMP180_<ContainerAllocator> const> ConstPtr;

}; // struct BMP180_

typedef ::pi_robot::BMP180_<std::allocator<void> > BMP180;

typedef boost::shared_ptr< ::pi_robot::BMP180 > BMP180Ptr;
typedef boost::shared_ptr< ::pi_robot::BMP180 const> BMP180ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pi_robot::BMP180_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pi_robot::BMP180_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pi_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pi_robot': ['/home/pi/catkin_ws/src/pi_robot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pi_robot::BMP180_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pi_robot::BMP180_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_robot::BMP180_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_robot::BMP180_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_robot::BMP180_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_robot::BMP180_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pi_robot::BMP180_<ContainerAllocator> >
{
  static const char* value()
  {
    return "657251609a9411407cf7245117d8b584";
  }

  static const char* value(const ::pi_robot::BMP180_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x657251609a941140ULL;
  static const uint64_t static_value2 = 0x7cf7245117d8b584ULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_robot::BMP180_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pi_robot/BMP180";
  }

  static const char* value(const ::pi_robot::BMP180_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pi_robot::BMP180_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 temperature\n\
float32 pressure\n\
float32 altitude\n\
";
  }

  static const char* value(const ::pi_robot::BMP180_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pi_robot::BMP180_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.pressure);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BMP180_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pi_robot::BMP180_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pi_robot::BMP180_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PI_ROBOT_MESSAGE_BMP180_H
